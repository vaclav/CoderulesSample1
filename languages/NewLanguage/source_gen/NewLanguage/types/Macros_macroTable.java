package NewLanguage.types;

/*Generated by MPS */

import jetbrains.mps.lang.coderules.template.AbstractMacroTable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.coderules.template.ExpandMacroTemplate;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.coderules.template.CallMacroTemplate;
import jetbrains.mps.lang.coderules.template.AbstractMacroTemplate;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.coderules.template.TemplateApplicationSession;
import jetbrains.mps.logic.reactor.logical.MetaLogical;
import jetbrains.mps.lang.coderules.template.RuleBuilder;
import jetbrains.mps.lang.coderules.template.PredicateBuilder;
import jetbrains.mps.logic.predicate.UnificationPredicate;
import jetbrains.mps.lang.coderules.template.ConstraintBuilder;
import jetbrains.mps.logic.reactor.program.ConstraintSymbol;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Macros_macroTable extends AbstractMacroTable {

  @Override
  public String name() {
    return "Macros";
  }

  @Override
  public SNodeReference tableRef() {
    return SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/4966914339162184915");
  }

  @Override
  public SNodeReference extendsRef() {
    return null;
  }

  @Override
  public <T extends ExpandMacroTemplate.Token> Collection<ExpandMacroTemplate<T>> expandMacroTemplate(SAbstractConcept concept) {
    if (concept == null) {
      throw new NullPointerException();
    }

    List<ExpandMacroTemplate<T>> result = ListSequence.fromList(new ArrayList<ExpandMacroTemplate<T>>());
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.ConstantIntegerType$Mr)) {
      ListSequence.fromList(result).addElement((ExpandMacroTemplate<T>) new ConstantIntegerType_7475035771484099139_Expand());
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.ConstantFloatType$fo)) {
      ListSequence.fromList(result).addElement((ExpandMacroTemplate<T>) new ConstantFloatType_7475035771484099171_Expand());
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.ConstantStringType$MU)) {
      ListSequence.fromList(result).addElement((ExpandMacroTemplate<T>) new ConstantStringType_7475035771484099211_Expand());
    }
    return result;
  }

  @Override
  public <T extends CallMacroTemplate.Token> CallMacroTemplate<T> callMacroTemplate(SNodeReference templateRef) {
    if (templateRef == null) {
      throw new NullPointerException();
    }

    switch (templateRef.getNodeId().toString()) {
      case "7475035771484017472":
        return (CallMacroTemplate<T>) new make_Float_Type_Call();
    }
    return null;
  }

  @Override
  public Collection<SNodeReference> allMacroTemplateRefs() {
    List<SNodeReference> result = ListSequence.fromList(new ArrayList<SNodeReference>());

    ListSequence.fromList(result).addElement(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099139"));
    ListSequence.fromList(result).addElement(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099171"));
    ListSequence.fromList(result).addElement(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099211"));
    ListSequence.fromList(result).addElement(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484017472"));

    return result;
  }

  public static class ConstantIntegerType_7475035771484099139_Expand extends AbstractMacroTemplate<ConstantIntegerType_7475035771484099139_Expand.Token> implements ExpandMacroTemplate<ConstantIntegerType_7475035771484099139_Expand.Token> {

    public static class Token implements ExpandMacroTemplate.Token {

      protected Token(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
        this.ruleInput = ruleInput;
        this.macroInput = macroInput;
        this.session = session;
      }

      private void init() {
      }

      @Override
      public Token withLogical(Object... logical) {
        this.Type = ((MetaLogical) logical[0]);
        return this;
      }

      @Override
      public RuleBuilder apply() {
        init();
        TemplateApplicationSession _session = session;
        RuleBuilder builder = new RuleBuilder(session, "NewLanguage.types.ConstantIntegerType_7475035771484099139");
        builder.appendBody(new PredicateBuilder(UnificationPredicate.UNI_SYM).withArguments(Token.this.Type, (new MyTerms_termTable.intType_term(false)).getTerm()).toPredicate());
        builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("typeOf", 2)).withArguments(macroInput, Token.this.Type).toConstraint());

        builder.processMacroInput(CONCEPTS.ConstantIntegerType$Mr, macroInput);
        return builder;
      }

      protected Token token() {
        return this;
      }

      protected TemplateApplicationSession session;
      protected MetaLogical Type;
      protected SNode macroInput;
      protected SNode ruleInput;
    }

    public ConstantIntegerType_7475035771484099139_Expand() {
      super(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099139"));
    }

    @Override
    public SNodeReference getPrototypeTemplateRef() {
      return SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099126");
    }

    @Override
    public Token createToken(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
      return new Token(ruleInput, macroInput, session);
    }
  }
  public static class ConstantFloatType_7475035771484099171_Expand extends AbstractMacroTemplate<ConstantFloatType_7475035771484099171_Expand.Token> implements ExpandMacroTemplate<ConstantFloatType_7475035771484099171_Expand.Token> {

    public static class Token implements ExpandMacroTemplate.Token {

      protected Token(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
        this.ruleInput = ruleInput;
        this.macroInput = macroInput;
        this.session = session;
      }

      private void init() {
      }

      @Override
      public Token withLogical(Object... logical) {
        this.Type = ((MetaLogical) logical[0]);
        return this;
      }

      @Override
      public RuleBuilder apply() {
        init();
        TemplateApplicationSession _session = session;
        RuleBuilder builder = new RuleBuilder(session, "NewLanguage.types.ConstantFloatType_7475035771484099171");
        builder.appendBody(new PredicateBuilder(UnificationPredicate.UNI_SYM).withArguments(Token.this.Type, (new MyTerms_termTable.floatType_term(false)).getTerm()).toPredicate());
        builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("typeOf", 2)).withArguments(macroInput, Token.this.Type).toConstraint());

        builder.processMacroInput(CONCEPTS.ConstantFloatType$fo, macroInput);
        return builder;
      }

      protected Token token() {
        return this;
      }

      protected TemplateApplicationSession session;
      protected MetaLogical Type;
      protected SNode macroInput;
      protected SNode ruleInput;
    }

    public ConstantFloatType_7475035771484099171_Expand() {
      super(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099171"));
    }

    @Override
    public SNodeReference getPrototypeTemplateRef() {
      return SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099126");
    }

    @Override
    public Token createToken(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
      return new Token(ruleInput, macroInput, session);
    }
  }
  public static class ConstantStringType_7475035771484099211_Expand extends AbstractMacroTemplate<ConstantStringType_7475035771484099211_Expand.Token> implements ExpandMacroTemplate<ConstantStringType_7475035771484099211_Expand.Token> {

    public static class Token implements ExpandMacroTemplate.Token {

      protected Token(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
        this.ruleInput = ruleInput;
        this.macroInput = macroInput;
        this.session = session;
      }

      private void init() {
      }

      @Override
      public Token withLogical(Object... logical) {
        this.Type = ((MetaLogical) logical[0]);
        return this;
      }

      @Override
      public RuleBuilder apply() {
        init();
        TemplateApplicationSession _session = session;
        RuleBuilder builder = new RuleBuilder(session, "NewLanguage.types.ConstantStringType_7475035771484099211");
        builder.appendBody(new PredicateBuilder(UnificationPredicate.UNI_SYM).withArguments(Token.this.Type, (new MyTerms_termTable.stringType_term(false)).getTerm()).toPredicate());
        builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("typeOf", 2)).withArguments(macroInput, Token.this.Type).toConstraint());

        builder.processMacroInput(CONCEPTS.ConstantStringType$MU, macroInput);
        return builder;
      }

      protected Token token() {
        return this;
      }

      protected TemplateApplicationSession session;
      protected MetaLogical Type;
      protected SNode macroInput;
      protected SNode ruleInput;
    }

    public ConstantStringType_7475035771484099211_Expand() {
      super(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099211"));
    }

    @Override
    public SNodeReference getPrototypeTemplateRef() {
      return SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484099126");
    }

    @Override
    public Token createToken(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
      return new Token(ruleInput, macroInput, session);
    }
  }
  public static class make_Float_Type_Call extends AbstractMacroTemplate<make_Float_Type_Call.Token> implements CallMacroTemplate<make_Float_Type_Call.Token> {

    public class Token implements CallMacroTemplate.Token {

      protected Token(TemplateApplicationSession session) {
        this.session = session;
      }

      private void init() {
      }


      public Token withParam(Object... value) {
        for (int _i = 0; _i < value.length; _i++) {
          switch (_i) {
          }
        }
        return this;
      }

      @Override
      public Token withLogical(Object... logical) {
        this.LCS = ((MetaLogical) logical[0]);
        return this;
      }

      public RuleBuilder apply() {
        init();
        TemplateApplicationSession _session = session;
        RuleBuilder builder = new RuleBuilder(session, "NewLanguage.types.make_Float_Type");
        builder.appendBody(new PredicateBuilder(UnificationPredicate.UNI_SYM).withArguments(Token.this.LCS, (new MyTerms_termTable.floatType_term(false)).getTerm()).toPredicate());

        return builder;
      }

      private TemplateApplicationSession session;
      protected MetaLogical LCS;

    }

    public make_Float_Type_Call() {
      super(SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(NewLanguage.types)/7475035771484017472"));
    }

    @Override
    public Token createToken(TemplateApplicationSession session) {
      return new Token(session);
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ConstantIntegerType$Mr = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x6deaa97c1207a3faL, "NewLanguage.structure.ConstantIntegerType");
    /*package*/ static final SConcept ConstantFloatType$fo = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x73cc67b338abc1eeL, "NewLanguage.structure.ConstantFloatType");
    /*package*/ static final SConcept ConstantStringType$MU = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x6deaa97c1207a3fbL, "NewLanguage.structure.ConstantStringType");
  }
}
