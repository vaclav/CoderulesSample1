package FunLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.substitute.SimpleConceptSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.WrapperSubstituteMenuPart;
import jetbrains.mps.editor.runtime.menus.SubstituteItemProxy;
import jetbrains.mps.lang.editor.menus.substitute.SubstituteMenuItemWrapper;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuLookup;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.lang.editor.menus.ConceptMenusPart;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class Assignment_SubstituteMenu extends SubstituteMenuBase {
  public Assignment_SubstituteMenu() {
    super(false, new EditorMenuDescriptorBase("default substitute menu for " + "Assignment", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249490742")));
  }
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Wrap_tcn811_a(), CONCEPTS.Assignment$m));
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Wrap_tcn811_b(), CONCEPTS.Assignment$m));
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SimpleConceptSubstituteMenuPart(CONCEPTS.Assignment$m, new EditorMenuDescriptorBase("simple substitute menu part for concept: " + "Assignment", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249490745"))), CONCEPTS.Assignment$m));
    result.add(new SMP_Subconcepts_tcn811_d());
    return result;
  }

  private class SMP_Wrap_tcn811_a extends WrapperSubstituteMenuPart {
    private SMP_Wrap_tcn811_a() {
      super(new EditorMenuDescriptorBase("wrap " + "default substitute menu for " + "VarReference", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249490758")));
    }

    @NotNull
    @Override
    protected SubstituteMenuItem wrapItem(final SubstituteMenuItem item, final SubstituteMenuContext _context) {
      final SubstituteItemProxy wrappedItem = new SubstituteItemProxy(item);
      return new SubstituteMenuItemWrapper(item, _context) {
        private SNode myCreatedNode;

        @Nullable
        @Override
        public SAbstractConcept getOutputConcept() {
          return CONCEPTS.Assignment$m;
        }
        @Nullable
        @Override
        public SNode createNode(@NotNull String pattern) {
          SNode nodeToWrap = super.createNode(pattern);
          SNode assignment = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f44358f90L, "FunLanguage.structure.Assignment"));
          SLinkOperations.setTarget(assignment, LINKS.left$$pjK, nodeToWrap);
          return assignment;
        }

        @Override
        public void select(@NotNull SNode createdNode, @NotNull String pattern) {
          SelectionUtil.selectCell(_context.getEditorContext(), createdNode, SelectionManager.LAST_CELL);
        }
      };
    }
    @Nullable
    @Override
    protected SubstituteMenuLookup getLookup(SubstituteMenuContext _context) {
      final EditorContext editorContext = _context.getEditorContext();
      SAbstractConcept conceptToFindMenuFor = getConceptToFindMenuFor(_context);
      return new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(editorContext.getRepository()), conceptToFindMenuFor);
    }
    private SAbstractConcept getConceptToFindMenuFor(SubstituteMenuContext _context) {
      return CONCEPTS.VarReference$bV;
    }
  }
  private class SMP_Wrap_tcn811_b extends WrapperSubstituteMenuPart {
    private SMP_Wrap_tcn811_b() {
      super(new EditorMenuDescriptorBase("wrap " + "default substitute menu for " + "ConstantReference", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408250063333")));
    }

    @NotNull
    @Override
    protected SubstituteMenuItem wrapItem(final SubstituteMenuItem item, final SubstituteMenuContext _context) {
      final SubstituteItemProxy wrappedItem = new SubstituteItemProxy(item);
      return new SubstituteMenuItemWrapper(item, _context) {
        private SNode myCreatedNode;

        @Nullable
        @Override
        public SAbstractConcept getOutputConcept() {
          return CONCEPTS.Assignment$m;
        }
        @Nullable
        @Override
        public SNode createNode(@NotNull String pattern) {
          SNode nodeToWrap = super.createNode(pattern);
          SNode assignment = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f44358f90L, "FunLanguage.structure.Assignment"));
          SNode dot = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f44358f40L, "FunLanguage.structure.DotAccessExpr"));
          SLinkOperations.setTarget(dot, LINKS.operand$x03i, nodeToWrap);
          SLinkOperations.setTarget(assignment, LINKS.left$$pjK, dot);
          return assignment;
        }

        @Override
        public void select(@NotNull SNode createdNode, @NotNull String pattern) {
          SelectionUtil.selectCell(_context.getEditorContext(), SLinkOperations.getTarget(createdNode, LINKS.left$$pjK), SelectionManager.LAST_CELL);
        }
      };
    }
    @Nullable
    @Override
    protected SubstituteMenuLookup getLookup(SubstituteMenuContext _context) {
      final EditorContext editorContext = _context.getEditorContext();
      SAbstractConcept conceptToFindMenuFor = getConceptToFindMenuFor(_context);
      return new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(editorContext.getRepository()), conceptToFindMenuFor);
    }
    private SAbstractConcept getConceptToFindMenuFor(SubstituteMenuContext _context) {
      return CONCEPTS.ConstantReference$c$;
    }
  }
  public class SMP_Subconcepts_tcn811_d extends ConceptMenusPart<SubstituteMenuItem, SubstituteMenuContext> {
    public SMP_Subconcepts_tcn811_d() {
      super(new EditorMenuDescriptorBase("include menus for all the direct subconcepts of " + "Assignment", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249490750")));
    }

    @Override
    protected Collection<SAbstractConcept> getConcepts(final SubstituteMenuContext _context) {
      return getDirectDescendants(_context, CONCEPTS.Assignment$m);
    }

    @Override
    protected Collection<SubstituteMenuItem> createItemsForConcept(SubstituteMenuContext context, SAbstractConcept concept) {
      return context.createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(context.getEditorContext().getRepository()), concept));
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Assignment$m = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f44358f90L, "FunLanguage.structure.Assignment");
    /*package*/ static final SConcept VarReference$bV = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f444ba339L, "FunLanguage.structure.VarReference");
    /*package*/ static final SConcept ConstantReference$c$ = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x5d19e06d28801405L, "FunLanguage.structure.ConstantReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$$pjK = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f44358f90L, 0xb4b542f44358f91L, "left");
    /*package*/ static final SContainmentLink operand$x03i = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0xb4b542f44358f40L, 0xb4b542f44358f43L, "operand");
  }
}
