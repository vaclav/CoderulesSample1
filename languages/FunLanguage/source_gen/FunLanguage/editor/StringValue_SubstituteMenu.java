package FunLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.substitute.SimpleConceptSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.menus.ConceptMenusPart;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;
import org.jetbrains.mps.openapi.language.SConcept;

public class StringValue_SubstituteMenu extends SubstituteMenuBase {
  public StringValue_SubstituteMenu() {
    super(false, new EditorMenuDescriptorBase("default substitute menu for " + "StringValue", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249076057")));
  }
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Action_i7huj0_a(), CONCEPTS.StringValue$R1));
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SimpleConceptSubstituteMenuPart(CONCEPTS.StringValue$R1, new EditorMenuDescriptorBase("simple substitute menu part for concept: " + "StringValue", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249311057"))), CONCEPTS.StringValue$R1));
    result.add(new SMP_Subconcepts_i7huj0_c());
    return result;
  }

  private class SMP_Action_i7huj0_a extends SingleItemSubstituteMenuPart {

    @Nullable
    @Override
    protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
      Item item = new Item(_context);
      item.resetTraceInfo();
      return item;
    }
    private class Item extends DefaultSubstituteMenuItem {
      private final SubstituteMenuContext _context;
      public Item(SubstituteMenuContext context) {
        super(CONCEPTS.StringValue$R1, context);
        _context = context;
      }

      /*package*/ void resetTraceInfo() {
        String description = "Substitute item: " + getMatchingText("");
        updateTraceInfo(description, new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249076522"));
      }

      @Nullable
      @Override
      public SNode createNode(@NotNull String pattern) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x44ee06468f8cb76eL, "FunLanguage.structure.StringValue"));
      }

      @Nullable
      @Override
      public String getDescriptionText(@NotNull String pattern) {
        return "String value";
      }
      @Nullable
      @Override
      public String getMatchingText(@NotNull String pattern) {
        return "\"";
      }
    }
  }
  public class SMP_Subconcepts_i7huj0_c extends ConceptMenusPart<SubstituteMenuItem, SubstituteMenuContext> {
    public SMP_Subconcepts_i7huj0_c() {
      super(new EditorMenuDescriptorBase("include menus for all the direct subconcepts of " + "StringValue", new SNodePointer("r:03a898a7-fc22-4755-8556-58301e273720(FunLanguage.editor)", "1942659408249310999")));
    }

    @Override
    protected Collection<SAbstractConcept> getConcepts(final SubstituteMenuContext _context) {
      return getDirectDescendants(_context, CONCEPTS.StringValue$R1);
    }

    @Override
    protected Collection<SubstituteMenuItem> createItemsForConcept(SubstituteMenuContext context, SAbstractConcept concept) {
      return context.createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(context.getEditorContext().getRepository()), concept));
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StringValue$R1 = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x44ee06468f8cb76eL, "FunLanguage.structure.StringValue");
  }
}
