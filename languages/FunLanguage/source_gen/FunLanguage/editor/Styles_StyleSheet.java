package FunLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.descriptor.EditorBuilderEnvironment;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.MPSFonts;

public class Styles_StyleSheet {
  public static class KeywordStyleClass extends AbstractStyleClass {
    public KeywordStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public KeywordStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.DARK_MAGENTA));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
    }

  }
  public static class NameStyleClass extends AbstractStyleClass {
    public NameStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public NameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.black));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
    }

  }
  public static class NumValueStyleClass extends AbstractStyleClass {
    public NumValueStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public NumValueStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.DARK_BLUE));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    }

  }
  public static class StringValueStyleClass extends AbstractStyleClass {
    public StringValueStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public StringValueStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.DARK_GREEN));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

  }
}
