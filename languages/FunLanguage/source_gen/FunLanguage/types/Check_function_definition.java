package FunLanguage.types;

/*Generated by MPS */

import jetbrains.mps.lang.coderules.template.AbstractRuleTemplate;
import jetbrains.mps.lang.coderules.template.RuleTemplate;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.coderules.template.TemplateApplicationSession;
import jetbrains.mps.lang.coderules.template.RuleBuilder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.logic.unification.MetaLogicalFactory;
import jetbrains.mps.logic.dataform.DataForm;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.coderules.template.ConstraintBuilder;
import jetbrains.mps.logic.reactor.program.ConstraintSymbol;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.coderules.template.ExpandMacroTemplate;
import jetbrains.mps.lang.coderules.template.ConstraintRuleTemplate;
import jetbrains.mps.logic.reactor.logical.MetaLogical;
import java.util.List;
import jetbrains.mps.lang.coderules.template.RuleTable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class Check_function_definition extends AbstractRuleTemplate<Check_function_definition.Token> {

  public class Token implements RuleTemplate.Token {

    public Token(SNode input, TemplateApplicationSession session) {
      this.fun = input;
      this.session = session;
    }

    @Override
    public Iterable<RuleBuilder> apply() {
      TemplateApplicationSession _session = session;
      ruleBuilders = ListSequence.fromList(new ArrayList<RuleBuilder>());
      {
        SNode target_jddv8_a0k = SLinkOperations.getTarget(token().fun, LINKS.body$Dpoh);
        new function_definition() {
          @Override
          public void apply(TemplateApplicationSession session) {
            ActualReturnType = MetaLogicalFactory.metaLogical("ActualReturnType", DataForm.class);
            DeclaredType = MetaLogicalFactory.metaLogical("DeclaredType", DataForm.class);

            RuleBuilder builder = new RuleBuilder(session, "FunLanguage.types.function_definition", "function_definition" + "_" + String.valueOf(token().fun.getNodeId()).replaceAll("~", "_"), getTemplateRef(), token().fun, SNodeOperations.getPointer(target_jddv8_a0k));

            builder.appendHeadKept(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.typeOf", 2)).withArguments(SLinkOperations.getTarget(token().fun, LINKS.body$Dpoh), rule().ActualReturnType).toConstraint());
            builder.appendHeadKept(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.checkAll", 0)).withArguments().toConstraint());
            builder.merge(0, session.expandMacro(token().fun, SLinkOperations.getTarget(token().fun, LINKS.declaredType$DoUf), SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(FunLanguage.types)/7475035771484099126"), (ExpandMacroTemplate.Token tok) -> tok.withLogical(rule().DeclaredType).withParams().apply()));
            builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.typeOf", 2)).withArguments(token().fun, rule().DeclaredType).toConstraint());
            builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.convertsTo", 2)).withArguments(rule().ActualReturnType, rule().DeclaredType).toConstraint());

            ListSequence.fromList(ruleBuilders).addElement(builder);
          }

        }.apply(_session);
      }
      return ruleBuilders;
    }

    protected Token token() {
      return this;
    }

    public abstract class function_definition implements ConstraintRuleTemplate {

      protected function_definition rule() {
        return this;
      }

      protected MetaLogical ActualReturnType;
      protected MetaLogical DeclaredType;

    }

    protected SNode fun;
    protected List<SNode> required;
    protected List<RuleBuilder> ruleBuilders;
    protected TemplateApplicationSession session;
  }


  public Check_function_definition(RuleTable ruleTable) {
    super(ruleTable, "function_definition", SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(FunLanguage.types)/3711979631470533744"));
  }

  @Override
  public SAbstractConcept applicableConcept() {
    return CONCEPTS.FunctionDefinition$$Y;
  }



  @Override
  public Token createToken(SNode input, TemplateApplicationSession session) {
    return new Token(input, session);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink body$Dpoh = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x338399ced3405e01L, 0x338399ced3406bd9L, "body");
    /*package*/ static final SContainmentLink declaredType$DoUf = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x338399ced3405e01L, 0x338399ced3406bd7L, "declaredType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FunctionDefinition$$Y = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x338399ced3405e01L, "FunLanguage.structure.FunctionDefinition");
  }
}
