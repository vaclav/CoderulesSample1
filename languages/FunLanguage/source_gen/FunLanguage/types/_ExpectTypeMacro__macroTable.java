package FunLanguage.types;

/*Generated by MPS */

import jetbrains.mps.lang.coderules.template.AbstractMacroTable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.coderules.template.ExpandMacroTemplate;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.coderules.template.CallMacroTemplate;
import jetbrains.mps.lang.coderules.template.AbstractMacroTemplate;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.coderules.template.TemplateApplicationSession;
import jetbrains.mps.logic.unification.MetaLogicalFactory;
import jetbrains.mps.logic.reactor.logical.MetaLogical;
import java.util.function.BiConsumer;
import jetbrains.mps.lang.coderules.template.RuleBuilder;
import jetbrains.mps.lang.coderules.template.ConstraintBuilder;
import jetbrains.mps.logic.reactor.program.ConstraintSymbol;
import jetbrains.mps.lang.coderules.template.PredicateBuilder;
import jetbrains.mps.logic.predicate.EvalExpressionPredicate;
import jetbrains.mps.lang.coderules.template.LateExpression;
import jetbrains.mps.logic.reactor.logical.LogicalContext;
import jetbrains.mps.logic.reactor.evaluation.InvocationContext;
import jetbrains.mps.logic.reactor.logical.Logical;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class _ExpectTypeMacro__macroTable extends AbstractMacroTable {

  @Override
  public String name() {
    return "_ExpectTypeMacro_";
  }

  @Override
  public SNodeReference tableRef() {
    return SNodePointer.deserialize("a968f85b-0931-4b14-bca7-5f06de99f93b/i:10000059(FunLanguage@transient0/FunLanguage.types@3_4)/888369174089419891");
  }

  @Override
  public SNodeReference extendsRef() {
    return null;
  }

  @Override
  public <T extends ExpandMacroTemplate.Token> Collection<ExpandMacroTemplate<T>> expandMacroTemplate(SAbstractConcept concept) {
    if (concept == null) {
      throw new NullPointerException();
    }

    List<ExpandMacroTemplate<T>> result = ListSequence.fromList(new ArrayList<ExpandMacroTemplate<T>>());
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), CONCEPTS.BaseConcept$gP)) {
      ListSequence.fromList(result).addElement((ExpandMacroTemplate<T>) new BaseConcept_888369174089419894_Expand());
    }
    return result;
  }

  @Override
  public <T extends CallMacroTemplate.Token> CallMacroTemplate<T> callMacroTemplate(SNodeReference templateRef) {
    if (templateRef == null) {
      throw new NullPointerException();
    }

    switch (templateRef.getNodeId().toString()) {
    }
    return null;
  }

  @Override
  public Collection<SNodeReference> allMacroTemplateRefs() {
    List<SNodeReference> result = ListSequence.fromList(new ArrayList<SNodeReference>());

    ListSequence.fromList(result).addElement(SNodePointer.deserialize("a968f85b-0931-4b14-bca7-5f06de99f93b/i:10000059(FunLanguage@transient0/FunLanguage.types@3_4)/888369174089419894"));

    return result;
  }

  public static class BaseConcept_888369174089419894_Expand extends AbstractMacroTemplate<BaseConcept_888369174089419894_Expand.Token> implements ExpandMacroTemplate<BaseConcept_888369174089419894_Expand.Token> {

    public static class Token implements ExpandMacroTemplate.Token {

      protected Token(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
        this.ruleInput = ruleInput;
        this.macroInput = macroInput;
        this.session = session;
      }

      private void init() {
        this.TypeNode = MetaLogicalFactory.metaLogical("TypeNode", SNode.class);
      }

      @Override
      public Token withLogical(Object... logical) {
        this.TypeTerm = ((MetaLogical) logical[0]);
        return this;
      }

      @Override
      public Token withParams(Object... params) {
        this.typeConsumer = ((BiConsumer<SNodeReference, SNode>) params[0]);
        return this;
      }

      @Override
      public RuleBuilder apply() {
        init();
        TemplateApplicationSession _session = session;
        RuleBuilder builder = new RuleBuilder(session, "FunLanguage.types.BaseConcept_888369174089419894");
        builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("__recoverType__", 2)).withArguments(Token.this.TypeNode, Token.this.TypeTerm).toConstraint());
        builder.appendBody(new PredicateBuilder(EvalExpressionPredicate.EVAL_SYM).withArguments(new LateExpression<Object>() {
          public Object[] metaArgs() {
            return new Object[]{Token.this.TypeNode};
          }
          public Object eval(LogicalContext _logicalContext, InvocationContext _invocationContext, Object... args) {
            Logical<SNode> typedArg0 = (Logical<SNode>) args[0];

            typeConsumer.accept(SNodeOperations.getPointer(macroInput), typedArg0.findRoot().value());
            return true;
          }
        }).toPredicate());

        builder.processMacroInput(CONCEPTS.BaseConcept$gP, macroInput);
        return builder;
      }

      protected Token token() {
        return this;
      }

      protected TemplateApplicationSession session;
      protected MetaLogical TypeTerm;
      protected MetaLogical TypeNode;
      protected BiConsumer<SNodeReference, SNode> typeConsumer;
      protected SNode macroInput;
      protected SNode ruleInput;
    }

    public BaseConcept_888369174089419894_Expand() {
      super(SNodePointer.deserialize("a968f85b-0931-4b14-bca7-5f06de99f93b/i:10000059(FunLanguage@transient0/FunLanguage.types@3_4)/888369174089419894"));
    }

    @Override
    public SNodeReference getPrototypeTemplateRef() {
      return SNodePointer.deserialize("a968f85b-0931-4b14-bca7-5f06de99f93b/i:10000059(FunLanguage@transient0/FunLanguage.types@3_4)/888369174089419932");
    }

    @Override
    public Token createToken(SNode ruleInput, SNode macroInput, TemplateApplicationSession session) {
      return new Token(ruleInput, macroInput, session);
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BaseConcept$gP = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept");
  }
}
