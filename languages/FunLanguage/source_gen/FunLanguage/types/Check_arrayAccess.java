package FunLanguage.types;

/*Generated by MPS */

import jetbrains.mps.lang.coderules.template.AbstractRuleTemplate;
import jetbrains.mps.lang.coderules.template.RuleTemplate;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.coderules.template.TemplateApplicationSession;
import jetbrains.mps.lang.coderules.template.RuleBuilder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.logic.unification.MetaLogicalFactory;
import jetbrains.mps.logic.dataform.DataForm;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.coderules.template.ConstraintBuilder;
import jetbrains.mps.logic.reactor.program.ConstraintSymbol;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.logic.dataform.ChildRole;
import jetbrains.mps.logic.unification.LogicalUtil;
import jetbrains.mps.lang.coderules.template.ConstraintRuleTemplate;
import jetbrains.mps.logic.reactor.logical.MetaLogical;
import java.util.List;
import jetbrains.mps.lang.coderules.template.RuleTable;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class Check_arrayAccess extends AbstractRuleTemplate<Check_arrayAccess.Token> {

  public class Token implements RuleTemplate.Token {

    public Token(SNode input, TemplateApplicationSession session) {
      this.arrayAccess = input;
      this.session = session;
    }

    @Override
    public Iterable<RuleBuilder> apply() {
      TemplateApplicationSession _session = session;
      ruleBuilders = ListSequence.fromList(new ArrayList<RuleBuilder>());
      new arrayAccess() {
        @Override
        public void apply(TemplateApplicationSession session) {
          TargetArrayType = MetaLogicalFactory.metaLogical("TargetArrayType", DataForm.class);
          ElementType = MetaLogicalFactory.metaLogical("ElementType", DataForm.class);
          IndexType = MetaLogicalFactory.metaLogical("IndexType", DataForm.class);

          RuleBuilder builder = new RuleBuilder(session, "FunLanguage.types.arrayAccess", "arrayAccess" + "_" + String.valueOf(token().arrayAccess.getNodeId()).replaceAll("~", "_"), getTemplateRef(), token().arrayAccess, SNodeOperations.getPointer(token().arrayAccess));

          builder.appendHeadKept(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.typeOf", 2)).withArguments(SLinkOperations.getTarget(token().arrayAccess, LINKS.array$vaBJ), rule().TargetArrayType).toConstraint());
          builder.appendHeadKept(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.typeOf", 2)).withArguments(SLinkOperations.getTarget(token().arrayAccess, LINKS.index$amV6), rule().IndexType).toConstraint());
          builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.typeOf", 2)).withArguments(token().arrayAccess, rule().ElementType).toConstraint());
          builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.convertsTo", 2)).withArguments(rule().IndexType, (new MyTypes_termTable.intType_term(false)).getTerm()).toConstraint());
          builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.convertsTo", 2)).withArguments(rule().TargetArrayType, (new MyTypes_termTable.arrayType_term(false) {
            public DataForm parameter() {
              return ChildRole.create("parameter", LogicalUtil.asDataForm(rule().ElementType));
            }
          }).getTerm()).toConstraint());

          ListSequence.fromList(ruleBuilders).addElement(builder);
        }

      }.apply(_session);
      return ruleBuilders;
    }

    protected Token token() {
      return this;
    }

    public abstract class arrayAccess implements ConstraintRuleTemplate {

      protected arrayAccess rule() {
        return this;
      }

      protected MetaLogical TargetArrayType;
      protected MetaLogical ElementType;
      protected MetaLogical IndexType;

    }

    protected SNode arrayAccess;
    protected List<SNode> required;
    protected List<RuleBuilder> ruleBuilders;
    protected TemplateApplicationSession session;
  }


  public Check_arrayAccess(RuleTable ruleTable) {
    super(ruleTable, "arrayAccess", SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(FunLanguage.types)/3953395691054636890"));
  }

  @Override
  public SAbstractConcept applicableConcept() {
    return CONCEPTS.ArrayAccess$gK;
  }



  @Override
  public Token createToken(SNode input, TemplateApplicationSession session) {
    return new Token(input, session);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink array$vaBJ = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x36dd486f5dd2a5d3L, 0x36dd486f5dd2a8bfL, "array");
    /*package*/ static final SContainmentLink index$amV6 = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x36dd486f5dd2a5d3L, 0x36dd486f5dd2a64eL, "index");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ArrayAccess$gK = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x36dd486f5dd2a5d3L, "FunLanguage.structure.ArrayAccess");
  }
}
