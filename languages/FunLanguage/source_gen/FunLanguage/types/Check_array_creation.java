package FunLanguage.types;

/*Generated by MPS */

import jetbrains.mps.lang.coderules.template.AbstractRuleTemplate;
import jetbrains.mps.lang.coderules.template.RuleTemplate;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.coderules.template.TemplateApplicationSession;
import jetbrains.mps.lang.coderules.template.RuleBuilder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.logic.unification.MetaLogicalFactory;
import jetbrains.mps.logic.dataform.DataForm;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.coderules.template.ConstraintBuilder;
import jetbrains.mps.logic.reactor.program.ConstraintSymbol;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.coderules.template.ExpandMacroTemplate;
import jetbrains.mps.logic.dataform.ChildRole;
import jetbrains.mps.logic.unification.LogicalUtil;
import jetbrains.mps.lang.coderules.template.ConstraintRuleTemplate;
import jetbrains.mps.logic.reactor.logical.MetaLogical;
import java.util.List;
import jetbrains.mps.lang.coderules.template.RuleTable;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class Check_array_creation extends AbstractRuleTemplate<Check_array_creation.Token> {

  public class Token implements RuleTemplate.Token {

    public Token(SNode input, TemplateApplicationSession session) {
      this.array = input;
      this.session = session;
    }

    @Override
    public Iterable<RuleBuilder> apply() {
      TemplateApplicationSession _session = session;
      ruleBuilders = ListSequence.fromList(new ArrayList<RuleBuilder>());
      new array_creation() {
        @Override
        public void apply(TemplateApplicationSession session) {
          ElementType = MetaLogicalFactory.metaLogical("ElementType", DataForm.class);

          RuleBuilder builder = new RuleBuilder(session, "FunLanguage.types.array_creation", "array_creation" + "_" + String.valueOf(token().array.getNodeId()).replaceAll("~", "_"), getTemplateRef(), token().array, SNodeOperations.getPointer(token().array));

          builder.appendHeadKept(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.checkAll", 0)).withArguments().toConstraint());
          builder.merge(0, session.expandMacro(token().array, SLinkOperations.getTarget(token().array, LINKS.elementType$tpyh), "FunLanguage.types.lift", (ExpandMacroTemplate.Token tok) -> tok.withLogical(rule().ElementType).withParams().apply()));
          builder.appendBody(new ConstraintBuilder(new ConstraintSymbol("FunLanguage.types.typeOf", 2)).withArguments(token().array, (new MyTypes_termTable.arrayType_term(false) {
            public DataForm parameter() {
              return ChildRole.create("parameter", LogicalUtil.asDataForm(rule().ElementType));
            }
          }).getTerm()).toConstraint());

          ListSequence.fromList(ruleBuilders).addElement(builder);
        }

      }.apply(_session);
      return ruleBuilders;
    }

    protected Token token() {
      return this;
    }

    public abstract class array_creation implements ConstraintRuleTemplate {

      protected array_creation rule() {
        return this;
      }

      protected MetaLogical ElementType;

    }

    protected SNode array;
    protected List<SNode> required;
    protected List<RuleBuilder> ruleBuilders;
    protected TemplateApplicationSession session;
  }


  public Check_array_creation(RuleTable ruleTable) {
    super(ruleTable, "array_creation", "FunLanguage.types.array_creation", SNodePointer.deserialize("r:9e6cb41b-3b70-499a-8027-e5d416a03df7(FunLanguage.types)/3953395691054188168"));
  }

  @Override
  public SAbstractConcept applicableConcept() {
    return CONCEPTS.CreateArray$vP;
  }



  @Override
  public Token createToken(SNode input, TemplateApplicationSession session) {
    return new Token(input, session);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elementType$tpyh = MetaAdapterFactory.getContainmentLink(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x36dd486f5dd2a25eL, 0x36dd486f5dd2a2d9L, "elementType");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CreateArray$vP = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x36dd486f5dd2a25eL, "FunLanguage.structure.CreateArray");
  }
}
