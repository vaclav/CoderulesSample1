package FunLanguage.types;

/*Generated by MPS */

import jetbrains.mps.lang.coderules.template.AbstractRuleTable;
import jetbrains.mps.lang.coderules.template.RuleTable;
import jetbrains.mps.lang.coderules.aspect.AbstractCoderulesManifest;
import java.util.Collection;
import jetbrains.mps.lang.coderules.template.RuleTemplate;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class _RecoverType__ruleTable extends AbstractRuleTable implements RuleTable {

  protected _RecoverType__ruleTable(AbstractCoderulesManifest manifest) {
    super(manifest);
    init();
  }

  @Override
  public String name() {
    return "_RecoverType_";
  }

  @Override
  public String fqName() {
    return "FunLanguage.types._RecoverType_";
  }

  @Override
  public String extendedFqName() {
    return "FunLanguage.types._RecoverType_Default_";
  }

  @Override
  public Collection<RuleTemplate<?>> ruleTemplates() {
    return ruleTemplates;
  }

  private void init() {
    List<RuleTemplate<?>> list = ListSequence.fromList(new ArrayList<RuleTemplate<?>>());
    ListSequence.fromList(list).addElement(new _RecoverType___recover_intType(this));
    ListSequence.fromList(list).addElement(new _RecoverType___recover_floatType(this));
    ListSequence.fromList(list).addElement(new _RecoverType___recover_intHoldingStringType(this));
    ListSequence.fromList(list).addElement(new _RecoverType___recover_floatHoldingStringType(this));
    ListSequence.fromList(list).addElement(new _RecoverType___recover_stringType(this));
    ListSequence.fromList(list).addElement(new _RecoverType___recover_structType(this));
    ListSequence.fromList(list).addElement(new _RecoverType___recover_arrayType(this));
    this.ruleTemplates = ListSequence.fromList(list).asUnmodifiable();
  }

  private List<RuleTemplate<?>> ruleTemplates;
}
