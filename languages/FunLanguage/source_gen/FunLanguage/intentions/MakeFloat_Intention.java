package FunLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public final class MakeFloat_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public MakeFloat_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:88230427-eea4-4626-949d-f92ff0709ff7(FunLanguage.intentions)", "1942659408249481930"));
  }
  @Override
  public String getPresentation() {
    return "MakeFloat";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Make a Float";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode f = SNodeOperations.replaceWithNewChild(node, CONCEPTS.FloatValue$v2);
      SPropertyOperations.assign(f, PROPS.value$ACDK, "" + SPropertyOperations.getInteger(node, PROPS.value$9Utg));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return MakeFloat_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FloatValue$v2 = MetaAdapterFactory.getConcept(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x73cc67b338ab2d0cL, "FunLanguage.structure.FloatValue");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$ACDK = MetaAdapterFactory.getProperty(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x73cc67b338ab2d0cL, 0x73cc67b338ab2d0dL, "value");
    /*package*/ static final SProperty value$9Utg = MetaAdapterFactory.getProperty(0xf1277323ea964c38L, 0xa5127456d3818e7aL, 0x44ee06468f8cb771L, 0x44ee06468f8cb772L, "value");
  }
}
